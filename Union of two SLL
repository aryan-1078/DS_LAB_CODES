//To find union of two SLL
#include <stdio.h>
#include <stdlib.h>
typedef struct node {
	int data;
	struct node *next;
} Node;
Node *insertAtBeg(Node *head, int value) {
	Node *newNode = (Node *)malloc(sizeof(Node));
	newNode->data=value;
	newNode->next=head;
	head=newNode;
	return head;
}
void printList(Node *head) {
	while(head!=NULL) {
		printf("%d ", head->data);
		head=head->next;
	}
	printf("\n");
}
Node *findUnion(Node *head1, Node *head2) {
	Node *unionList=NULL;
	while(head1!=NULL) {
		unionList=insertAtBeg(unionList, head1->data);
		head1=head1->next;
	}
	while(head2!=NULL) {
		Node *temp=unionList;
		while(temp!=NULL) {
			if(head2->data==temp->data) {
				break;
			}
			temp=temp->next;
		}
		if(temp==NULL) {
			unionList=insertAtBeg(unionList, head2->data);
		}
		head2=head2->next;
	}
	return unionList;
}
int main() {
	Node *head1=NULL;
	Node *head2=NULL;
	head1=insertAtBeg(head1, 25);
	head1=insertAtBeg(head1, 65);
	head1=insertAtBeg(head1, 70);
	head2=insertAtBeg(head2, 50);
	head2=insertAtBeg(head2, 25);
	head2=insertAtBeg(head2, 35);
	Node *unionList=findUnion(head1, head2);
	printf("Union of two linked lists: ");
	printList(unionList);
	return 0;
}
