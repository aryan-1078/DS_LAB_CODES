//Concatenate two SLL
#include <stdio.h>
#include <stdlib.h>
struct Node {
	int data;
	struct Node *next;
};
struct Node *createNode(int value) {
	struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
	newNode->data=value;
	newNode->next=NULL;
	return newNode;
}
//Function to append a node at the end of the linked list
void append(struct Node **head, int value) {
	struct Node *newNode=createNode(value);
	if(*head==NULL) {
		*head=newNode;
	} else {
		struct Node *current=*head;
		while(current->next!=NULL) {
			current=current->next;
		}
		current->next=newNode;
	}
}
//Function to concatenate two SLL
void concatenateLists(struct Node **list1, struct Node *list2) {
	if(*list1==NULL) {
		*list1=list2;
	} else {
		struct Node *current=*list1;
		while(current->next!=NULL) {
			current=current->next;
		}
		current->next=list2;
	}
}
void printLinkedList(struct Node *head) {
	struct Node *current=head;
	while(current!=NULL) {
		printf("%d ", current->data);
		current=current->next;
    }
    printf("NULL\n");
}
int main() {
	struct Node *list1=NULL;
	struct Node *list2=NULL;
	
	append(&list1, 1);
	append(&list1, 2);
	append(&list1, 3);
	
	append(&list2, 4);
	append(&list2, 5);
	append(&list2, 6);
	
	printf("List 1: ");
	printLinkedList(list1);
	printf("List 2: ");
	printLinkedList(list2);
	
	concatenateLists(&list1, list2);
	
	printf("Concatenated list: ");
	printLinkedList(list1);
	return 0;
}
