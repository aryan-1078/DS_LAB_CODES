#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in a graph
typedef struct Node {
  int vertex;
  struct Node *next;
} Node;

// Structure to represent a graph
typedef struct Graph {
  int numVertices;
  Node **adjLists;
} Graph;

// Function to create a new node
Node *createNode(int vertex) {
  Node *newNode = malloc(sizeof(Node));
  newNode->vertex = vertex;
  newNode->next = NULL;
  return newNode;
}

// Function to add an edge to the graph
void addEdge(Graph *graph, int src, int dest) {
  Node *newNode = createNode(dest);
  newNode->next = graph->adjLists[src];
  graph->adjLists[src] = newNode;

  newNode = createNode(src);
  newNode->next = graph->adjLists[dest];
  graph->adjLists[dest] = newNode;
}

// Function to create a new graph
Graph *createGraph(int numVertices) {
  Graph *graph = malloc(sizeof(Graph));
  graph->numVertices = numVertices;
  graph->adjLists = malloc(sizeof(Node *) * numVertices);
  for (int i = 0; i < numVertices; i++) {
    graph->adjLists[i] = NULL;
  }
  return graph;
}

// Function to print the DFS traversal of the graph
void DFS(Graph *graph, int start) {
  // Mark all vertices as unvisited
  int visited[graph->numVertices];
  for (int i = 0; i < graph->numVertices; i++) {
    visited[i] = 0;
  }

  // Create a stack to store the vertices
  Node *stack = NULL;

  // Push the start vertex to the stack
  push(&stack, start);

  // While the stack is not empty
  while (stack != NULL) {
    // Pop the top vertex from the stack
    int vertex = pop(&stack);

    // If the vertex is not visited, mark it as visited and print it
    if (!visited[vertex]) {
      visited[vertex] = 1;
      printf("%d ", vertex);

      // Push all adjacent vertices to the stack
      Node *adjList = graph->adjLists[vertex];
      while (adjList != NULL) {
        push(&stack, adjList->vertex);
        adjList = adjList->next;
      }
    }
  }
}

// Function to push a vertex to the stack
void push(Node **stack, int vertex) {
  Node *newNode = createNode(vertex);
  newNode->next = *stack;
  *stack = newNode;
}

// Function to pop a vertex from the stack
int pop(Node **stack) {
  if (*stack == NULL) {
    return -1;
  }

  int vertex = (*stack)->vertex;
  Node *toDelete = *stack;
  *stack = (*stack)->next;
  free(toDelete);

  return vertex;
}

int main() {
  // Create a graph with 5 vertices
  Graph *graph = createGraph(5);

  // Add edges to the graph
  addEdge(graph, 0, 1);
  addEdge(graph, 0, 2);
  addEdge(graph, 1, 3);
  addEdge(graph, 1, 4);
  addEdge(graph, 2, 4);

  // Perform DFS traversal of the graph starting from vertex 0
  DFS(graph, 0);

  printf("\n");

  return 0;
}
